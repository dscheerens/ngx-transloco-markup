import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { HashMap } from '@ngneat/transloco';

import { TranslationMarkupRenderer } from './translation-markup-renderer.model';

/**
 * Factory used for creating different types of `TranslationMarkupRenderer` instances.
 */
@Injectable({ providedIn: 'root' })
export class TranslationMarkupRendererFactory {

    /** Document instance used by the renderers to create the actual DOM nodes. */
    private readonly document: Document;

    /**
     * Creates a new `TranslationMarkupRendererFactory` instance.
     *
     * @param document Document instance used by the renderers to create the actual DOM nodes.
     */
    constructor(
        @Inject(DOCUMENT) document: any
    ) {
        this.document = document;
    }

    /**
     * Creates a markup renderer to render text. This can be either a static text or on that dynamically resolved based on the translation
     * parameters.
     *
     * @param   text Text that is to be rendered or a function that returns the text to be rendered based on the translation parameters.
     * @returns      A `TranslationMarkupRenderer` that renders the specified text.
     */
    public createTextRenderer(text: string | ((translationParameters: HashMap) => string)): TranslationMarkupRenderer {
        const document = this.document;

        return function renderText(translationParameters: HashMap): Node {
            return document.createTextNode(typeof text === 'string' ? text : text(translationParameters));
        };
    }

    /**
     * Creates a markup renderer that renders an HTML element with the specified tag and (optionally) attaches the content rendered by the
     * given child markup renderers.
     *
     * @param   elementTag     Tag of the HTML element that is be created by the renderer.
     * @param   childRenderers An optional sequence of child markup renderers, which will be used to render the contents of the element.
     * @returns                A `TranslationMarkupRenderer` that renders the specified HTML element and optional content generated by the
     *                         given sequence of child renderers.
     */
    public createElementRenderer<K extends keyof HTMLElementTagNameMap>(
        elementTag: K,
        childRenderers?: TranslationMarkupRenderer[]
    ): TranslationMarkupRenderer<HTMLElementTagNameMap[K]>;
    public createElementRenderer(elementTag: string, childRenderers?: TranslationMarkupRenderer[]): TranslationMarkupRenderer<HTMLElement>;
    public createElementRenderer(elementTag: string, childRenderers?: TranslationMarkupRenderer[]): TranslationMarkupRenderer<HTMLElement> {
        const document = this.document;

        return function renderElement(translationParameters: HashMap): HTMLElement {
            const element = document.createElement(elementTag);

            for (const renderChild of childRenderers || []) {
                element.appendChild(renderChild(translationParameters));
            }

            return element;
        };
    }

}
